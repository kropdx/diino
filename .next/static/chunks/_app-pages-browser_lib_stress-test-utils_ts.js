"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_lib_stress-test-utils_ts"],{

/***/ "(app-pages-browser)/./lib/stress-test-utils.ts":
/*!**********************************!*\
  !*** ./lib/stress-test-utils.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatStressTester: () => (/* binding */ ChatStressTester)\n/* harmony export */ });\n/* harmony import */ var _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase/client */ \"(app-pages-browser)/./lib/supabase/client.ts\");\n\nclass ChatStressTester {\n    async runBurstTest() {\n        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const { messageCount = 100, concurrency = 10, delayBetweenBatches = 100, roomId = '00000000-0000-0000-0000-000000000001' } = options;\n        console.log(\"\\uD83D\\uDE80 Starting burst test: \".concat(messageCount, \" messages, \").concat(concurrency, \" concurrent\"));\n        const startTime = Date.now();\n        this.results = {\n            success: 0,\n            failed: 0,\n            times: []\n        };\n        // Get current user\n        const { data: { user } } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) {\n            console.error('❌ Not authenticated');\n            return;\n        }\n        // Process messages in batches\n        for(let i = 0; i < messageCount; i += concurrency){\n            const batch = [];\n            for(let j = 0; j < concurrency && i + j < messageCount; j++){\n                const index = i + j;\n                batch.push(this.sendMessage(user.id, roomId, index));\n            }\n            await Promise.all(batch);\n            if (i + concurrency < messageCount) {\n                await new Promise((resolve)=>setTimeout(resolve, delayBetweenBatches));\n            }\n            // Progress update\n            console.log(\"\\uD83D\\uDCCA Progress: \".concat(Math.min(i + concurrency, messageCount), \"/\").concat(messageCount, \" messages sent\"));\n        }\n        const totalTime = (Date.now() - startTime) / 1000;\n        this.printResults(totalTime);\n    }\n    async runSpikeTest() {\n        let spikeSize = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 50;\n        console.log(\"⚡ Sending \".concat(spikeSize, \" messages simultaneously...\"));\n        const { data: { user } } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) {\n            console.error('❌ Not authenticated');\n            return;\n        }\n        this.results = {\n            success: 0,\n            failed: 0,\n            times: []\n        };\n        const startTime = Date.now();\n        const promises = Array(spikeSize).fill(0).map((_, i)=>this.sendMessage(user.id, '00000000-0000-0000-0000-000000000001', i));\n        await Promise.all(promises);\n        const totalTime = (Date.now() - startTime) / 1000;\n        this.printResults(totalTime);\n    }\n    async measureRealtimeLatency() {\n        let iterations = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n        console.log(\"\\uD83D\\uDCE1 Measuring realtime latency (\".concat(iterations, \" samples)...\"));\n        const { data: { user } } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (!user) {\n            console.error('❌ Not authenticated');\n            return;\n        }\n        const latencies = [];\n        const roomId = '00000000-0000-0000-0000-000000000001';\n        // Subscribe to realtime\n        const channel = _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.channel(\"latency-test-\".concat(Date.now()));\n        const receivedMessages = new Map();\n        channel.on('postgres_changes', {\n            event: 'INSERT',\n            schema: 'public',\n            table: 'chat_messages',\n            filter: \"room_id=eq.\".concat(roomId)\n        }, (payload)=>{\n            const sentTime = receivedMessages.get(payload.new.client_id);\n            if (sentTime) {\n                const latency = Date.now() - sentTime;\n                latencies.push(latency);\n                console.log(\"✓ Message \".concat(payload.new.client_id.slice(-8), \" latency: \").concat(latency, \"ms\"));\n            }\n        }).subscribe();\n        // Wait for subscription\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        // Send test messages\n        for(let i = 0; i < iterations; i++){\n            const clientId = crypto.randomUUID();\n            const sentTime = Date.now();\n            receivedMessages.set(clientId, sentTime);\n            await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.functions.invoke('send-message', {\n                body: {\n                    room_id: roomId,\n                    content: \"Latency test \".concat(i),\n                    client_id: clientId\n                }\n            });\n            await new Promise((resolve)=>setTimeout(resolve, 200));\n        }\n        // Wait for all messages\n        await new Promise((resolve)=>setTimeout(resolve, 2000));\n        _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.removeChannel(channel);\n        if (latencies.length > 0) {\n            const avg = latencies.reduce((a, b)=>a + b, 0) / latencies.length;\n            const min = Math.min(...latencies);\n            const max = Math.max(...latencies);\n            console.log(\"\\n\\uD83D\\uDCCA Realtime Latency Results:\\n   Average: \".concat(avg.toFixed(2), \"ms\\n   Min: \").concat(min, \"ms\\n   Max: \").concat(max, \"ms\\n   Samples: \").concat(latencies.length, \"/\").concat(iterations, \"\\n      \"));\n        } else {\n            console.log('❌ No realtime messages received');\n        }\n    }\n    async sendMessage(userId, roomId, index) {\n        const start = performance.now();\n        try {\n            const { error } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.functions.invoke('send-message', {\n                body: {\n                    room_id: roomId,\n                    content: \"Stress test message \".concat(index, \" at \").concat(new Date().toISOString()),\n                    client_id: crypto.randomUUID()\n                }\n            });\n            const time = performance.now() - start;\n            this.results.times.push(time);\n            if (error) {\n                this.results.failed++;\n                console.error(\"❌ Message \".concat(index, \" failed:\"), error);\n            } else {\n                this.results.success++;\n            }\n        } catch (e) {\n            this.results.failed++;\n            console.error(\"❌ Message \".concat(index, \" error:\"), e);\n        }\n    }\n    printResults(totalTime) {\n        const avgTime = this.results.times.length > 0 ? this.results.times.reduce((a, b)=>a + b, 0) / this.results.times.length : 0;\n        const minTime = this.results.times.length > 0 ? Math.min(...this.results.times) : 0;\n        const maxTime = this.results.times.length > 0 ? Math.max(...this.results.times) : 0;\n        console.log(\"\\n\\uD83C\\uDFC1 Stress Test Complete!\\n━━━━━━━━━━━━━━━━━━━━━━\\n✅ Successful: \".concat(this.results.success, \"\\n❌ Failed: \").concat(this.results.failed, \"\\n⏱️  Total Time: \").concat(totalTime.toFixed(2), \"s\\n\\uD83D\\uDCCA Messages/sec: \").concat((this.results.success / totalTime).toFixed(2), \"\\n\\nResponse Times:\\n  Average: \").concat(avgTime.toFixed(2), \"ms\\n  Min: \").concat(minTime.toFixed(2), \"ms\\n  Max: \").concat(maxTime.toFixed(2), \"ms\\n━━━━━━━━━━━━━━━━━━━━━━\\n    \"));\n    }\n    constructor(){\n        this.results = {\n            success: 0,\n            failed: 0,\n            times: []\n        };\n    }\n}\n// Export for browser console usage\nif (true) {\n    window.ChatStressTester = ChatStressTester;\n    console.log(\"\\n\\uD83E\\uDDEA Chat Stress Testing Tools Loaded!\\n\\nQuick commands:\\n  const tester = new ChatStressTester();\\n  \\n  // Send 100 messages with 10 concurrent\\n  await tester.runBurstTest({ messageCount: 100, concurrency: 10 });\\n  \\n  // Send 50 messages all at once\\n  await tester.runSpikeTest(50);\\n  \\n  // Measure realtime latency\\n  await tester.measureRealtimeLatency(10);\\n  \");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/stress-test-utils.ts\n"));

/***/ })

}]);